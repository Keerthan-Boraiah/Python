"https://leetcode.com/problems/isomorphic-strings/description/?envType=daily-question&envId=2024-04-02"

Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

 

Example 1:

Input: s = "egg", t = "add"
Output: true
Example 2:

Input: s = "foo", t = "bar"
Output: false
Example 3:

Input: s = "paper", t = "title"
Output: true
 

Constraints:

1 <= s.length <= 5 * 104
t.length == s.length
s and t consist of any valid ascii character.

#-------------------------------------------------------------------------------------------
Intuition
Approach
Check length of S and T unique set and check zip of s and t unique, if they all match ofc the output should be true.

Complexity
Time complexity:
O(N)

Space complexity:
O(N)

Code
class Solution:
    def isIsomorphic(self, s: str, t: str) -> bool:
        if len(set(s)) == len(set(zip(s, t))) == len(set(t)):
            return True
        else:
            return False

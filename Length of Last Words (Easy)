"https://leetcode.com/problems/length-of-last-word/description/?envType=daily-question&envId=2024-04-01"

Given a string s consisting of words and spaces, return the length of the last word in the string.

A word is a maximal 
substring consisting of non-space characters only.

 
Example 1:

Input: s = "Hello World"
Output: 5
Explanation: The last word is "World" with length 5.
Example 2:

Input: s = "   fly me   to   the moon  "
Output: 4
Explanation: The last word is "moon" with length 4.
Example 3:

Input: s = "luffy is still joyboy"
Output: 6
Explanation: The last word is "joyboy" with length 6.
 

Constraints:

1 <= s.length <= 104
s consists of only English letters and spaces ' '.
There will be at least one word in s.

#---------------------------------------------------------------------------------------------------
#CODE HERE
#---------------------------------------------------------------------------------------------------

class Solution:
    def lengthOfLastWord(self, s: str) -> int:
        
        final = list(filter(("").__ne__, s.split(" ")))

        return len(final[-1])

#---------------------------------------------------------------------------------------------------
#Explanation Here
#---------------------------------------------------------------------------------------------------

intuition
It is a beginner's thinking.

Approach
1st:- split the string into list. I'm splitting the list by " ", so all the words which have empty space will eb split
2nd:- remove all the empty space, so finally you will have list of words.
3rd:- return last index length from the list of words

DONE.

Complexity
Time complexity:
O(n) for splitting
O(1) for filtering
Therefore time complexity is O(n)

Space complexity:
O(n) for storing the split list in 'FINAL'
Therefore space complexity is O(n)
